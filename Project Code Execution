#installing textblob for use in preprocessing data
!pip install textblob

# turning off warnings
import warnings
warnings.filterwarnings("ignore")

# importing common libraries
import matplotlib.pyplot as plt
import csv 
import sklearn
import numpy as np

# reading in dataset to pandas DataFrame
import pandas as pd
df = pd.read_csv('spam_ham_dataset1.csv')
df.head()

#dropping unneccessary columns/features
df = df.drop('Unnamed: 0', axis=1) #dropping the Unnamed: 0 & label_num column
df = df.drop('label_num', axis=1)  
df.head() #retrieving data after dropping unnecessary data

#seperating out emails labeled spam into its own DataFrame
spam = pd.DataFrame()
spam = df.loc[df['label'] == 'spam']   #retrieving the spam data from label
spam.head()

#seperating out emails labeled ham into its own DataFrame
ham = df.loc[df['label'] == 'ham']   #retrieving the ham data from label
ham.head()

#regrouping spam and ham datasets with shuffling
from sklearn.utils import shuffle
spam_ham = pd.concat([spam,ham])  #grouping the both ham and spam
spam_ham = shuffle(spam_ham)
spam_ham

# 70/30 split for training and testing sets with seperation between x-input features and y-ouput labels for each

from sklearn.model_selection import StratifiedKFold, GridSearchCV, cross_val_score, train_test_split 
X_train, X_test, y_train, y_test = train_test_split(spam_ham['text'],spam_ham['label'],test_size=0.3, random_state=42)

# lemmatization function which turns input (expected: sentence) into all lowercase, 
# uses TextBlob for processing, and splits string into list of lemmatized words

def lemma_(msg):
    msg = msg.lower()
    words = TextBlob(msg).words
    return [word.lemma for word in words]

from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from textblob import TextBlob
def transform_(mail):
    bow = CountVectorizer(analyzer=lemma_).fit(X_train)
    messages = bow.transform(mail)
    print('sparse matrix shape:', messages.shape)
    print('number of non-zeros:', messages.nnz) 
    print('sparsity: %.2f%%' % (100.0 * messages.nnz / (messages.shape[0] * messages.shape[1])))
    tfidf = TfidfTransformer().fit(messages)
    tfidf_msgs = tfidf.transform(messages)
    return tfidf_msgs

import nltk
# contains specific words which is word library based on spam and ham 
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4') 

#transforming the train feaatures (tf-idf)
train_features = transform_(X_train)

# Permonace matrices of the model which is how model is trained and performing up to the bench mark of expectation on accurancy 
from sklearn.metrics import classification_report, f1_score, accuracy_score, confusion_matrix 
from sklearn.metrics import precision_score , roc_auc_score , recall_score
# Function created for the matrix
def model_assessment(y_test,predicted_class):
    print('confusion matrix')
    print(confusion_matrix(y_test,predicted_class))
    print('accuracy')
    print(accuracy_score(y_test,predicted_class))
    print('precision')
    print(precision_score(y_test,predicted_class,pos_label='spam'))
    print('recall')
    print(recall_score(y_test,predicted_class,pos_label='spam'))
    print('f-Score')
    print(f1_score(y_test,predicted_class,pos_label='spam'))
    print('AUC')
    print(roc_auc_score(np.where(y_test=='spam',1,0),np.where(predicted_class=='spam',1,0)))
    plt.matshow(confusion_matrix(y_test, predicted_class), cmap=plt.cm.binary, interpolation='nearest')
    plt.title('confusion matrix')
    plt.colorbar()
    plt.ylabel('expected label')
    plt.xlabel('predicted label')

# function that trains an inputted model on the training data, predicts on the transformed testing features, 
# and then assess the prediction by the correlating true label.

def model_prediction(model):
    model.fit(train_features,y_train)
    testing_features = transform_(X_test)
    prediction = model.predict(testing_features)
    print(model_assessment(y_test,prediction))



# Naive Bayes Model

# Naive Bayes Model

#Report of performance matrix 
from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
model_prediction(model)



# Word2Vec

# starting installations and import functions
!pip install gensim
import gensim
from gensim.models import Word2Vec

# upgrading gensim
pip install --upgrade gensim

# rereading in the data from the csv file into a reinitialized DataFrame
df = pd.read_csv('spam_ham_dataset1.csv')
df.head()

df["text"] = df.text
df["spam"] = df.label

X_word2vec = df["text"]
Y_word2vec = df["spam"]
X_word2vec, Y_word2vec

# encoding the labels
from sklearn.preprocessing import LabelEncoder
le_word2vec = LabelEncoder()
Y_word2vec = le_word2vec.fit_transform(Y_word2vec)
Y_word2vec

#importing nltk librarises for stemming and stopword
from nltk.corpus import stopwords 
from nltk.stem.porter import PorterStemmer
nltk.download('stopwords')

# preprocessing all email-texts in dataset, one by one: 
#    removing non letters, lowercasing, splitting sentences, removing stopwords and stemming, then rejoining 
#    the processed email-text into one string to append to list before moving on to next email-text sample.

stemmer=PorterStemmer()
corpus=[]
for i in range(len(df["text"])):
    text_1=re.sub('[^a-zA-Z]'," ",df["text"][i])
    text_1=text_1.lower()
    text_1=text_1.split()
    text_1=[stemmer.stem(word) for word in text_1 if word not in stopwords.words('english')]
    text_1=' '.join(text_1)
    corpus.append(text_1)

# ensuring all emails were processed
print(len(corpus))
print(len(Y_word2vec))

# 80/20 train-test split on the processed text data and labels.
xtrain , xtest , ytrain , ytest = train_test_split(corpus , Y_word2vec , test_size = 0.2 , random_state = 2)

# creating a list of all vocabulary in the training set
doc = [text.split() for text in xtrain]

# making a Word2Vec model
model = gensim.models.Word2Vec(window = 3 , min_count = 5 , workers = 8)

# buiding the vocabulary known to the model using the list of vocabularies from the training set
model.build_vocab(doc)

# getting a list of keys in the model, ie the vocab/words
words = list(model.wv.index_to_key)
vocabulary_size = len(words)
print(vocabulary_size)

#training the model on the vocabulary that comes directly from xtrain
model.train(doc , total_examples = len(doc) , epochs = 32)

# using tokenizer on the xtrain text to get a list/dict of vocab and printing the size to get the number of vocabulary present.
tokenizer = Tokenizer()
tokenizer.fit_on_texts(xtrain)
vocabulary_size = len(tokenizer.word_index) + 1
print(vocabulary_size)

# getting sequence for encoded text
x_train = pad_sequences(tokenizer.texts_to_sequences(xtrain) , maxlen = 300)
x_test = pad_sequences(tokenizer.texts_to_sequences(xtest) , maxlen = 300)

# adding the numpy vector of words from the tokenizer that are in the word_vec model to a matrix at a corrrelating index to each word in the tokenizer.
matrix = np.zeros((vocabulary_size, 100))
print(matrix)
for word, i in tokenizer.word_index.items():
    if word in model.wv:
        matrix[i] = model.wv[word]
print(matrix.shape)

# building a model
embedding_layer = Embedding(vocabulary_size, 100, weights = [matrix], input_length = 300, trainable = False)
model = Sequential()
model.add(embedding_layer)
model.add(Dropout(0.2))
model.add(LSTM(64, dropout = 0.2, recurrent_dropout = 0.2))
model.add(Dense(1, activation = 'sigmoid'))

model.summary()

# compiling models with specified loss function, optimizer and ouput metrics.
model.compile(loss = 'binary_crossentropy' , optimizer = "adam" , metrics = ['accuracy'])

# training the model with monitoring for early stop from loss in accuracy.
history = model.fit(x_train , ytrain , batch_size = 32 , epochs = 20, validation_split = 0.1 ,
                    verbose = 1 , callbacks = [ ReduceLROnPlateau(monitor = 'val_loss' , patience = 5 , cooldown = 0),
              EarlyStopping(monitor = 'val_acc', min_delta = 1e-4 , patience = 5)] )

# evaluating from inbuilt model function
score = model.evaluate(x_test, ytest, batch_size = 32)
print()
print("Accuracy Score : " , score[1])
print("Loss Score : " , score[0])

# gathering predictions from the model based on probability categorization (bi) and getting the confusion matrix on the predicted vs actual labels

y_predict  = [1 if o>0.5 else 0 for o in model.predict(x_test)]

cf_matrix = confusion_matrix(ytest , y_predict)

tn, fp, fn, tp = confusion_matrix(ytest,y_predict).ravel()

# plotting the confusion matrix

ax= plt.subplot()
sns.heatmap(cf_matrix, annot=True, ax = ax,cmap='Blues',fmt=''); #annot=True to annotate cells

ax.set_xlabel('Predicted labels');
ax.set_ylabel('True labels'); 
ax.set_title('Confusion Matrix'); 
ax.xaxis.set_ticklabels(['Not Spam', 'Spam']); ax.yaxis.set_ticklabels(['Not Spam', 'Spam']);

print("Precision: {:.2f}%".format(100 * precision_score(ytest, y_predict)))
print("Recall: {:.2f}%".format(100 * recall_score(ytest, y_predict)))
print("F1 Score: {:.2f}%".format(100 * f1_score(ytest,y_predict)))

f1_score(ytest,y_predict)
